" Settings
set backupdir=~/.vimfiles/backup/
set directory=~/.vimfiles/backup/
set backupcopy=yes
set fileencoding=utf-8
set hidden
set hlsearch
set incsearch
set ignorecase
set smartcase
let loaded_matchparen = 1

" Vundle
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Bundle "gmarik/vundle"

Bundle "mattn/emmet-vim"
Bundle "tomtom/tlib_vim"
Bundle "nono/vim-handlebars"
Bundle "othree/html5.vim"
Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "pangloss/vim-javascript"
Bundle "groenewege/vim-less"
Bundle "sickill/vim-pasta"
Bundle "garbas/vim-snipmate"
Bundle "honza/vim-snippets"
Bundle "wavded/vim-stylus"
Bundle 'kchmck/vim-coffee-script'
Bundle 'scrooloose/nerdtree'
Bundle 'nvie/vim-flake8'
Bundle 'ntpeters/vim-better-whitespace'
Bundle 'mileszs/ack.vim'
Bundle 'Glench/Vim-Jinja2-Syntax'
Bundle "Valloric/YouCompleteMe"
Bundle "marijnh/tern_for_vim"
Bundle "scrooloose/syntastic"
Bundle "mxw/vim-jsx"
Bundle "othree/yajs.vim"

filetype plugin indent on

" Visual
syntax on
set completeopt=menu
set gcr=a:blinkon1
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab
set visualbell
set t_Co=256
call pathogen#infect()
colorscheme molokai
highlight ColorColumn ctermbg=darkgrey

" Powerline
set rtp+=$HOME/.local/lib/python2.7/site-packages/powerline/bindings/vim/
set laststatus=2

" Bindings
function! Tab_Or_Complete()
  if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-N>"
  else
    return "\<Tab>"
  endif
endfunction
inoremap <Tab> <C-R>=Tab_Or_Complete()<CR>
map '' ciw'<C-r>"'<Esc>
" map d'' di'hPl2x
map "" ciw"<C-r>""<Esc>
" map d"" di"hPl2x
nmap <F5> :%y+<Return>
nmap <F6> :r !xsel --clipboard --output<Return>
nmap <F9> :exec "!git blame ".(expand('%:p'))." -L".(line("."))<cr>
nmap <Tab> :b#<CR>
set pastetoggle=<F4>

" NERDTree configuration
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$',  '\.bak$', '\~$']
let NERDTreeShowBookmarks=1
let g:NERDTreeDirArrows=1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
map <F3> :NERDTreeToggle<CR>

" Identation and Spaces
autocmd FileType javascript,coffee setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 colorcolumn=80
autocmd FileType html,htmldjango,css,scss,less,sass,stylus setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4 colorcolumn=80
autocmd BufRead,BufNewFile *.md,markdown,*.mkd setlocal syntax=markdown

" Filetypes
au BufRead,BufNewFile *.jsx set filetype=javascript

" Autoreload file
set autoread
au CursorMoved,CursorHold,FocusGained,BufEnter,InsertEnter * :checkt

" ctrlp
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|meteor)$|node_modules'
let g:ctrlp_max_height=25
let g:ctrlp_clear_cache_on_exit=0
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal g'\"" | endif
endif

" Emmet
let g:user_emmet_install_global = 0
autocmd FileType html,htmldjango,css,scss,sass,styl EmmetInstall
"autocmd FileType html,htmldjango,css,scss,sass,styl imap ll <plug>(EmmetExpandAbbr)
"autocmd FileType html,htmldjango imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")

ino <c-j> <c-r>=snipMate#TriggerSnippet()<cr>

" Better Whitespace
autocmd FileType css,sass,less,scss,coffee,python,html,javascript,htmldjango,markdown autocmd BufWritePre <buffer> StripWhitespace

set encoding=utf-8

" Syntastic
let g:syntastic_python_checkers = ['flake8']
let g:syntastic_javascript_checkers = ['jsxhint']
nmap <F8> :SyntasticCheck<CR>

